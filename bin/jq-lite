#!/usr/bin/env perl

use strict;
use warnings;
use JSON::PP;
use IO::File;
use FindBin;
use Term::ANSIColor;
use lib "$FindBin::Bin/../lib";
use JQ::Lite;

my $decoder;
my $decoder_module;
my $decoder_debug = 0;
my $decoder_choice;

# Parse command-line args before anything else
for (my $i = 0; $i < @ARGV; $i++) {
    if ($ARGV[$i] eq '--debug') {
        $decoder_debug = 1;
        splice @ARGV, $i, 1;
        redo;
    }
    if ($ARGV[$i] eq '--use') {
        $decoder_choice = $ARGV[$i + 1];
        splice @ARGV, $i, 2;
        redo;
    }
    if ($ARGV[$i] eq '--help-functions') {
        print_supported_functions();
        exit 0;
    }
}

if ($decoder_choice) {
    if ($decoder_choice eq 'JSON::MaybeXS') {
        require JSON::MaybeXS;
        $decoder = \&JSON::MaybeXS::decode_json;
        $decoder_module = 'JSON::MaybeXS';
    }
    elsif ($decoder_choice eq 'Cpanel::JSON::XS') {
        require Cpanel::JSON::XS;
        $decoder = \&Cpanel::JSON::XS::decode_json;
        $decoder_module = 'Cpanel::JSON::XS';
    }
    elsif ($decoder_choice eq 'JSON::XS') {
        require JSON::XS;
        $decoder = \&JSON::XS::decode_json;
        $decoder_module = 'JSON::XS';
    }
    elsif ($decoder_choice eq 'JSON::PP') {
        require JSON::PP;
        $decoder = \&JSON::PP::decode_json;
        $decoder_module = 'JSON::PP';
    }
    else {
        die "[ERROR] Unknown JSON module: $decoder_choice\n";
    }
}
else {
    if (eval { require JSON::MaybeXS; 1 }) {
        $decoder = \&JSON::MaybeXS::decode_json;
        $decoder_module = 'JSON::MaybeXS';
    }
    elsif (eval { require Cpanel::JSON::XS; 1 }) {
        $decoder = \&Cpanel::JSON::XS::decode_json;
        $decoder_module = 'Cpanel::JSON::XS';
    }
    elsif (eval { require JSON::XS; 1 }) {
        $decoder = \&JSON::XS::decode_json;
        $decoder_module = 'JSON::XS';
    }
    else {
        require JSON::PP;
        $decoder = \&JSON::PP::decode_json;
        $decoder_module = 'JSON::PP';
    }
}

# debug
warn "[DEBUG] Using $decoder_module\n" if $decoder_debug;

# Show help if no arguments are given
if (!@ARGV) {
    print <<'USAGE';
jq-lite - A lightweight jq-like JSON query tool written in pure Perl

Usage:
  jq-lite [options] '.query' [file.json]

Options:
  -r, --raw-output     Print raw strings instead of JSON-encoded values
  --color              Colorize JSON output (keys, strings, numbers, booleans)
  --use <Module>       Force JSON decoder module (e.g. JSON::PP, JSON::XS, Cpanel::JSON::XS)
  --debug              Show which JSON module is being used
  -h, --help           Show this help message
  --help-functions     Show list of all supported functions
  -v, --version        Show version information

Examples:
  cat users.json | jq-lite '.users[].name'
  jq-lite '.users[] | select(.age > 25)' users.json
  jq-lite -r '.users[] | .name' users.json
  jq-lite '.meta has "version"' config.json
  jq-lite --color '.items | sort | reverse | first' data.json

Homepage:
  https://metacpan.org/pod/JQ::Lite
USAGE
    exit 0;
}

# Argument parsing
my $raw_output   = 0;
my $color_output = 0;
my $query;
my $filename;

while (@ARGV) {
    my $arg = shift @ARGV;

    if ($arg eq '--raw-output' || $arg eq '-r') {
        $raw_output = 1;
    }
    elsif ($arg eq '--color') {
        $color_output = 1;
    }
    elsif ($arg eq '--help' || $arg eq '-h') {
        print <<'USAGE';
jq-lite - A lightweight jq-like JSON query tool written in pure Perl

Usage:
  jq-lite [options] '.query' [file.json]

Options:
  -r, --raw-output     Print raw strings instead of JSON-encoded values
  --color              Colorize JSON output (keys, strings, numbers, booleans)
  --use <Module>       Force JSON decoder module (e.g. JSON::PP, JSON::XS, Cpanel::JSON::XS)
  --debug              Show which JSON module is being used
  -h, --help           Show this help message
  --help-functions     Show list of all supported functions
  -v, --version        Show version information

Examples:
  cat users.json | jq-lite '.users[].name'
  jq-lite '.users[] | select(.age > 25)' users.json
  jq-lite -r '.users[] | .name' users.json
  jq-lite '.meta has "version"' config.json
  jq-lite --color '.items | sort | reverse | first' data.json

Homepage:
  https://metacpan.org/pod/JQ::Lite
USAGE
        exit 0;
    }
    elsif ($arg eq '--version' || $arg eq '-v') {
        print "jq-lite version $JQ::Lite::VERSION\n";
        exit 0;
    }
    # First check if this argument is a file
    elsif (!defined $filename && -f $arg) {
        $filename = $arg;
    }
    # If not a file and query is not yet set, treat it as the query string
    elsif (!defined $query) {
        $query = $arg;
    }
    # Secondary filename fallback
    elsif (!defined $filename && -f $arg) {
        $filename = $arg;
    }
    else {
        die "Usage: jq-lite [options] '.query' [file.json]\n";
    }
}

# Load JSON from file or STDIN
my $json_text;
if (defined $filename) {
    open my $fh, '<', $filename or die "Cannot open file '$filename': $!\n";
    local $/;
    $json_text = <$fh>;
    close $fh;
}
else {
    local $/;
    $json_text = <STDIN>;
}

# Create JQ::Lite object
my $jq = JQ::Lite->new(raw => $raw_output);

# Colorizing helper
sub colorize_json {
    my $json = shift;

    $json =~ s/"([^"]+)"(?=\s*:)/color("cyan")."\"$1\"".color("reset")/ge;
    $json =~ s/: "([^"]*)"/": ".color("green")."\"$1\"".color("reset")/ge;
    $json =~ s/: (\d+(\.\d+)?)/": ".color("yellow")."$1".color("reset")/ge;
    $json =~ s/: (true|false|null)/": ".color("magenta")."$1".color("reset")/ge;

    return $json;
}

# Output helper
sub print_results {
    my @results = @_;
    my $pp = JSON::PP->new->utf8->canonical->pretty;

    for my $r (@results) {
        if (!defined $r) {
            print "null\n";
        }
        elsif ($raw_output && !ref($r)) {
            print "$r\n";
        }
        else {
            my $json = $pp->encode($r);
            $json = colorize_json($json) if $color_output;
            print $json;
        }
    }
}

# Interactive mode
if (!defined $query) {
    system("stty -icanon -echo");

    $SIG{INT} = sub {
        system("stty sane");
        print "\n[EXIT]\n";
        exit 0;
    };

    my $input = '';
    my @last_results;

    my $ok = eval {
        @last_results = $jq->run_query($json_text, '.');
        1;
    };
    if (!$ok || !@last_results) {
        my $data = eval { JSON::PP->new->decode($json_text) };
        if ($data) {
            @last_results = ($data);
        }
    }

    system("clear");
    if (@last_results) {
        print_results(@last_results);
    } else {
        print "[INFO] Failed to load initial JSON data.\n";
    }

    print "\nType query (ESC to quit):\n";
    print "> $input\n";

    while (1) {
        my $char;
        sysread(STDIN, $char, 1);

        my $ord = ord($char);
        last if $ord == 27;

        if ($ord == 127 || $char eq "\b") {
            chop $input if length($input);
        } else {
            $input .= $char;
        }

        system("clear");

        my @results;
        my $ok = eval {
            @results = $jq->run_query($json_text, $input);
            1;
        };

        if ($ok && @results) {
            @last_results = @results;
        }

        if (!$ok) {
            print "[INFO] Invalid or partial query. Showing last valid results.\n";
        } elsif (!@results) {
            print "[INFO] Query returned no results. Showing last valid results.\n";
        }

        if (@last_results) {
            eval {
                print_results(@last_results);
                1;
            } or do {
                my $e = $@ || 'Unknown error';
                print "[ERROR] Failed to print: $e\n";
            };
        } else {
            print "[INFO] No previous valid results.\n";
        }

        print "\n> $input\n";
    }

    system("stty sane");
    print "\nGoodbye.\n";
    exit 0;
}

# One-shot mode
my @results = eval { $jq->run_query($json_text, $query) };
if ($@) {
    die "[ERROR] Invalid query: $@\n";
}

if (!@results) {
    warn "[INFO] No results returned for query.\n";
    exit 1;
}

sub print_supported_functions {
    print <<'EOF';

Supported Functions:
  length           - Count array elements, hash keys, or characters in scalars
  keys             - Extract sorted keys from a hash
  values           - Extract values from a hash (v0.34)
  sort             - Sort array items
  sort_desc        - Sort array items in descending order
  sort_by(KEY)     - Sort array of objects by key
  pluck(KEY)       - Collect a key's value from each object in an array
  pick(KEYS...)    - Build new objects containing only the supplied keys (arrays handled element-wise)
  merge_objects()  - Merge arrays of objects into a single hash (last-write-wins)
  unique           - Remove duplicate values
  unique_by(KEY)   - Remove duplicates by projecting each item on KEY
  reverse          - Reverse an array
  first / last     - Get first / last element of an array
  limit(N)         - Limit array to first N elements
  drop(N)          - Skip the first N elements of an array
  tail(N)          - Return the final N elements of an array
  chunks(N)        - Split array into subarrays each containing up to N items
  enumerate()      - Pair each array element with its zero-based index
  count            - Count total number of matching items
  map(EXPR)        - Map/filter array items with a subquery
  add / sum        - Sum all numeric values in an array
  sum_by(KEY)      - Sum numeric values projected from each array item
  avg_by(KEY)      - Average numeric values projected from each array item
  min_by(PATH)     - Return the element with the smallest projected value
  max_by(PATH)     - Return the element with the largest projected value
  product          - Multiply all numeric values in an array
  min / max        - Return minimum / maximum numeric value in an array
  avg              - Return the average of numeric values in an array
  median           - Return the median of numeric values in an array
  mode             - Return the most frequent value in an array (ties pick earliest occurrence)
  variance         - Return the variance of numeric values in an array
  stddev           - Return the standard deviation of numeric values in an array
  abs              - Convert numbers (and array elements) to their absolute value
  ceil()           - Round numbers up to the nearest integer
  floor()          - Round numbers down to the nearest integer
  round()          - Round numbers to the nearest integer (half-up semantics)
  clamp(MIN, MAX)  - Clamp numeric values within an inclusive range
  to_number()      - Coerce numeric-looking strings/booleans into numbers
  nth(N)           - Get the Nth element of an array (zero-based index)
  index(VALUE)     - Return the zero-based index of VALUE within arrays or strings
  group_by(KEY)    - Group array items by field
  group_count(KEY) - Count grouped items by field
  join(SEPARATOR)  - Join array elements with a string
  split(SEPARATOR) - Split string values (and arrays of strings) by a literal separator
  substr(START[, LENGTH])
                   - Extract substring using zero-based indices (arrays handled element-wise)
  slice(START[, LENGTH])
                  - Return a subarray using zero-based indices (negative starts count from the end)
  has              - Check if objects contain a key or arrays expose an index
  contains         - Check if strings include a fragment, arrays contain an element, or hashes have a key
  match("pattern") - Match string using regex
  flatten          - Explicitly flatten arrays (same as .[])
  flatten_all()    - Recursively flatten nested arrays into a single array
  flatten_depth(N) - Flatten nested arrays up to N levels deep
  del(KEY)         - Remove a key from objects in the result
  compact          - Remove undefined values from arrays
  path             - Return available keys for objects or indexes for arrays
  is_empty         - Check if an array or object is empty
  upper()          - Convert scalars and array elements to uppercase
  lower()          - Convert scalars and array elements to lowercase
  titlecase()      - Convert scalars and array elements to title case
  trim()           - Strip leading/trailing whitespace from strings (recurses into arrays)
  startswith(PFX)  - Check if a string (or array of strings) begins with PFX
  endswith(SFX)    - Check if a string (or array of strings) ends with SFX
  empty            - Discard all output (for side-effect use)
  type()           - Return the type of value ("string", "number", "boolean", "array", "object", "null")
  default(VALUE)   - Substitute VALUE when result is undefined

EOF
}

print_results(@results);
